openapi: '3.0.3'
info:
  title: Strava API
  version: '1.0'
servers:
  - url: https://api.server.test/v1
paths:
  /{userId}/addUser:
    post:
      description: ''
      tags: 
        - addUser
      parameters: [{name: 'userId', in: 'path', schema: {type: string}, required: true}]
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/addUser'
              }
      responses:
        '200':
          description: OK

  /initWebhook:
    post:
      tags:
        - webhook
      responses:
        '200':
          description: OK

  /webhook:
    post:
      tags:
        - webhook
      responses:
        '200':
          description: OK

  /{userId}/summitedPeaks:
    get:
      tags:
        - peaksHunters
      parameters:
        - {name: 'userId', in: 'path', schema: {type: string}, required: true}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items: 
                  $ref: '#/components/schemas/summitedPeak'

  /{userId}/peak/{peakId}:
    get:
      tags:
        - peaksHunters
      parameters:
        - {name: 'userId', in: 'path', schema: {type: string}, required: true}
        - {name: 'peakId', in: 'path', schema: {type: string}, required: true}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items: 
                  $ref: '#/components/schemas/activity'

  /{userId}/skiDays:
    get:
      tags:
        - aggregates
      parameters:
        - { name: 'userId', in: 'path', schema: {type: string}, required: true }
        - { name: 'fromDate', in: 'query', schema: {type: string}, required: false, description: 'Filter from date' }
        - { name: 'toDate', in: 'query', schema: {type: string}, required: false, description: 'Filter to date' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {
                $ref: "#/components/schemas/skiDays"
              }

  /{userId}/streaks:
    get:
      tags:
        - aggregates
      parameters:
        - { name: 'userId', in: 'path', schema: {type: string}, required: true }
        - { name: 'fromDate', in: 'query', schema: {type: string}, required: false, description: 'Filter from date' }
        - { name: 'toDate', in: 'query', schema: {type: string}, required: false, description: 'Filter to date' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {
                $ref: "#/components/schemas/streaks"
              }

components:
  schemas:
    addUser:
      type: object
      properties:
        refreshToken:
          type: string

    summitedPeak:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        elevation:
          type: number
        location:
          type: string
        noOfSummits:
          type: integer

    skiDays:
      type: object
      properties:
        alpineSkiDays:
          type: integer
        backcountrySkiDays:
          type: integer
        nordicSkiDays:
          type: integer
        snowboardDays:
          type: integer
        backcountrySkiElevationGain:
          type: number
        alpineSkiVerticalDrop:
          type: number
        totalSkiDays:
          type: integer

    streaks:
      type: object
      properties:
        currentActivityStreak:
          type: integer
        longestActivityStreak:
          type: integer
        currentActivityStreakStartDate:
          type: string
        longestActivityStreakStartDate:
          type: string
        longestActivityStreakEndDate:
          type: string
        currentRunningStreak:
          type: integer
        longestRunningStreak:
          type: integer
        currentRunningStreakStartDate:
          type: string
        longestRunningStreakStartDate:
          type: string
        longestRunningStreakEndDate:
          type: string
        
    peakInfo:
      type: object
      properties:
        id:
          type: string
          example: "123"
        name:
          type: string
          example: "Peak Name"
      required:
        - id
        - name

    activity:
      type: object
      properties:
        id:
          type: string
          example: "activity123"
        userId:
          type: string
          example: "user456"
        name:
          type: string
          example: "Activity Name"
        description:
          type: string
          nullable: true
          example: "This is an activity."
        distance:
          type: number
          format: float
          nullable: true
          example: 10.5
        movingTime:
          type: number
          format: float
          nullable: true
          example: 3600
        elapsedTime:
          type: number
          format: float
          nullable: true
          example: 4000
        calories:
          type: number
          format: float
          nullable: true
          example: 500
        totalElevationGain:
          type: number
          format: float
          nullable: true
          example: 200
        elevHigh:
          type: number
          format: float
          nullable: true
          example: 1500
        elevLow:
          type: number
          format: float
          nullable: true
          example: 800
        sportType:
          type: string
          example: "Running"
        startDate:
          type: string
          format: date-time
          example: "2024-08-07T12:00:00Z"
        startDateLocal:
          type: string
          format: date-time
          example: "2024-08-07T12:00:00Z"
        timezone:
          type: string
          nullable: true
          example: "UTC"
        startLatLng:
          type: array
          items:
            type: number
            format: float
          nullable: true
          example: [34.0522, -118.2437]
        endLatLng:
          type: array
          items:
            type: number
            format: float
          nullable: true
          example: [34.0522, -118.2437]
        athleteCount:
          type: integer
          nullable: true
          example: 1
        averageSpeed:
          type: number
          format: float
          nullable: true
          example: 5.0
        maxSpeed:
          type: number
          format: float
          nullable: true
          example: 10.0
        polyline:
          type: string
          nullable: true
          example: "Encoded polyline"
        summaryPolyline:
          type: string
          nullable: true
          example: "Encoded summary polyline"
        peaks:
          type: array
          items:
            $ref: '#/components/schemas/peakInfo'
      required:
        - id
        - userId
        - name
        - sportType
        - startDate
        - startDateLocal
